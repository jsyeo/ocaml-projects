Loading sPL program ..
  let {int->int->int} f =  (fun {int->int->int} x       -> fun {int->int} y -> x+y end end)in {int->int} f 4 end
  as let {Int->Int->Int} f = fun {Int->Int->Int} x -> fun {Int->Int} y -> +[Var(x),Var(y)] end end in {Int->Int}Appln[Var(f); Int(4)] end
TYPE CHECKING program ..
 ==> inferred type Int->Int
TRANSFORMING ==> Appln[fun {(Int->Int->Int)->Int->Int} f -> Appln[Var(f); Int(4)] end; fun {Int->Int->Int} x -> fun {Int->Int} y -> +[Var(x),Var(y)] end end]
COMPILING ==> sp17c.svm
[LDF([],1,label_1),LDF([],1,label_0),CALL 1,DONE,
label_0:,LDCI 4,LD (f,0),CALL 1,RTN,
label_1:,LDF([(x,0)],1,label_2),RTN,
label_2:,LD (x,0),LD (y,1),PLUS,RTN]
TAIL-OPTIMIZE ==> 
[LDF([],1,label_1),LDF([],1,label_0),CALL 1,DONE,
label_0:,LDCI 4,LD (f,0),TAILCALL 1,
label_1:,LDF([(x,0)],1,label_2),RTN,
label_2:,LD (x,0),LD (y,1),PLUS,RTN]
LINKING ==> 
[LDF([],1,7),LDF([],1,4),CALL 1,DONE,
4:,LDCI 4,LD (f,0),TAILCALL 1,
7:,LDF([(x,0)],1,9),RTN,
9:,LD (x,0),LD (y,1),PLUS,RTN]
Loading sVM code from ..sp17c.svm
Loaded [LDF([],1,7),LDF([],1,4),CALL 1,DONE,LDCI 4,LD (f,0),TAILCALL 1,LDF([(x,0)],1,9),RTN,LD (x,0),LD (y,1),PLUS,RTN]
High Stack Memory Mark :1
Executing ==> CLOSURE
